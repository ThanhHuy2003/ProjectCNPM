<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Krypton.Toolkit</name>
    </assembly>
    <members>
        <member name="T:Krypton.Toolkit.AccurateText">
            <summary>
            Provide accurate text measuring and drawing capability.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.AccurateText.MeasureString(System.Drawing.Graphics,System.Windows.Forms.RightToLeft,System.String,System.Drawing.Font,Krypton.Toolkit.PaletteTextTrim,Krypton.Toolkit.PaletteRelativeAlign,Krypton.Toolkit.PaletteTextHotkeyPrefix,System.Drawing.Text.TextRenderingHint,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Pixel accurate measure of the specified string when drawn with the specified Font object.
            </summary>
            <param name="g">Graphics instance used to measure text.</param>
            <param name="rtl">Right to left setting for control.</param>
            <param name="text">String to measure.</param>
            <param name="font">Font object that defines the text format of the string.</param>
            <param name="trim">How to trim excess text.</param>
            <param name="align">How to align multi-line text.</param>
            <param name="prefix">How to process prefix characters.</param>
            <param name="hint">Rendering hint.</param>
            <param name="composition">Should draw on a composition element.</param>
            <param name="glowing">When on composition draw with glowing.</param>
            <param name="disposeFont">Dispose of font when finished with it.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>A memento used to draw the text.</returns>
        </member>
        <member name="M:Krypton.Toolkit.AccurateText.DrawString(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle,System.Windows.Forms.RightToLeft,Krypton.Toolkit.VisualOrientation,System.Boolean,System.Boolean,Krypton.Toolkit.PaletteState,Krypton.Toolkit.AccurateTextMemento)">
            <summary>
            Pixel accurate drawing of the requested text memento information.
            </summary>
            <param name="g">Graphics object used for drawing.</param>
            <param name="brush">Brush for drawing text with.</param>
            <param name="rect">Rectangle to draw text inside.</param>
            <param name="rtl">Right to left setting for control.</param>
            <param name="orientation">Orientation for drawing text.</param>
            <param name="memento">Memento containing text context.</param>
            <param name="state">State of the source element.</param>
            <param name="composition">Should draw on a composition element.</param>
            <param name="glowing">When on composition draw with glowing.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>True if draw succeeded; False is draw produced an error.</returns>
        </member>
        <member name="M:Krypton.Toolkit.AccurateText.DrawCompositionGlowingText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle,Krypton.Toolkit.PaletteState,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw text with a glowing background, for use on a composition element.
            </summary>
            <param name="g">Graphics reference.</param>
            <param name="text">Text to be drawn.</param>
            <param name="font">Font to use for text.</param>
            <param name="bounds">Bounding area for the text.</param>
            <param name="state">State of the source element.</param>
            <param name="color"><see cref="T:System.Drawing.Color"/> of the text.</param>
            <param name="copyBackground">Should existing background be copied into the bitmap.</param>
        </member>
        <member name="M:Krypton.Toolkit.AccurateText.DrawCompositionText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle,Krypton.Toolkit.PaletteState,System.Drawing.Color,System.Boolean,System.Drawing.StringFormat)">
            <summary>
            Draw text without a glowing background, for use on a composition element.
            </summary>
            <param name="g">Graphics reference.</param>
            <param name="text">Text to be drawn.</param>
            <param name="font">Font to use for text.</param>
            <param name="bounds">Bounding area for the text.</param>
            <param name="state">State of the source element.</param>
            <param name="color"><see cref="T:System.Drawing.Color"/> of the text.</param>
            <param name="copyBackground">Should existing background be copied into the bitmap.</param>
            <param name="sf">StringFormat of the memento.</param>
        </member>
        <member name="T:Krypton.Toolkit.AccurateTextMemento">
            <summary>
            Encapsulate the information needed to draw text using the AccurateText class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.AccurateTextMemento.#ctor(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Drawing.Text.TextRenderingHint,System.Boolean)">
            <summary>
            Initialize a new instance of the TextMemento class.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="font">Drawing font.</param>
            <param name="sizeF">Size of measured text.</param>
            <param name="format">String formatting.</param>
            <param name="hint">Drawing hint.</param>
            <param name="disposeFont">Should the font be disposed.</param>
        </member>
        <member name="M:Krypton.Toolkit.AccurateTextMemento.Dispose">
            <summary>
            Dispose of the memento resources.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.AccurateTextMemento.Text">
            <summary>
            Gets the text to draw.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.AccurateTextMemento.Font">
            <summary>
            Gets the drawing font.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.AccurateTextMemento.Size">
            <summary>
            Gets the pixel size of the text area.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.AccurateTextMemento.Format">
            <summary>
            Gets the StringFormat of the text area.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.AccurateTextMemento.IsEmpty">
            <summary>
            Gets a value indicating if the memento represents nothing that can be drawn.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.AccurateTextMemento.Empty">
            <summary>
            Get access to an empty TextMemento instance.
            </summary>
            <remarks>
            Only create the single instance when first requested
            </remarks>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpec">
            <summary>
            Specification for a button.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonSpec.Click">
            <summary>
            Occurs whenever a button specification property has changed.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonSpec.ButtonSpecPropertyChanged">
            <summary>
            Occurs whenever a button specification property has changed.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.#ctor">
            <summary>
            Initialize a new instance of the ButtonSpec class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ToString">
            <summary>
            Returns a string that represents the current defaulted state.
            </summary>
            <returns>A string that represents the current defaulted state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.Clone">
            <summary>
            Make a clone of this object.
            </summary>
            <returns>New instance.</returns>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.IsDefault">
            <summary>
            Gets a value indicating if all values are default.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.Image">
            <summary>
            Gets and sets the button image.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetImage">
            <summary>
            Resets the Image property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ImageTransparentColor">
            <summary>
            Gets and sets the button image.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetImageTransparentColor">
            <summary>
            Resets the ImageTransparentColor property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ImageStates">
            <summary>
            Gets access to the state specific images for the button.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.Text">
            <summary>
            Gets and sets the button text.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetText">
            <summary>
            Resets the Text property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ExtraText">
            <summary>
            Gets and sets the button extra text.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetExtraText">
            <summary>
            Resets the ExtraText property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ToolTipImage">
            <summary>
            Gets and sets the button tooltip image.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetToolTipImage">
            <summary>
            Resets the ToolTipImage property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ToolTipImageTransparentColor">
            <summary>
            Gets and sets the tooltip image transparent color.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetToolTipImageTransparentColor">
            <summary>
            Resets the ToolTipImageTransparentColor property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ToolTipTitle">
            <summary>
            Gets and sets the button title tooltip text.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetToolTipTitle">
            <summary>
            Resets the ToolTipTitle property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ToolTipBody">
            <summary>
            Gets and sets the button body tooltip text.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetToolTipBody">
            <summary>
            Resets the ToolTipBody property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ToolTipStyle">
            <summary>
            Gets and sets the tooltip label style.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetToolTipStyle">
            <summary>
            Resets the ToolTipStyle property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ToolTipShadow">
            <summary>
            Gets and sets the tooltip label style.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.UniqueName">
            <summary>
            Gets and sets the unique name of the ButtonSpec.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetUniqueName">
            <summary>
            Resets the UniqueName property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.AllowInheritImage">
            <summary>
            Gets and sets if the button image be inherited if defined as null.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetAllowInheritImage">
            <summary>
            Resets the AllowInheritImage property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.AllowInheritText">
            <summary>
            Gets and sets if the button text be inherited if defined as empty.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetAllowInheritText">
            <summary>
            Resets the AllowInheritText property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.AllowInheritExtraText">
            <summary>
            Gets and sets if the button extra text be inherited if defined as empty.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetAllowInheritExtraText">
            <summary>
            Resets the AllowInheritExtraText property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.AllowInheritToolTipTitle">
            <summary>
            Gets and sets if the button tooltip title be inherited if defined as empty.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetAllowInheritToolTipTitle">
            <summary>
            Resets the AllowInheritToolTipTitle property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.AllowComponent">
            <summary>
            Gets a value indicating if the component is allowed to be selected at design time.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ColorMap">
            <summary>
            Gets and sets image color to remap to container foreground.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetColorMap">
            <summary>
            Resets the ColorMap property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.Style">
            <summary>
            Gets and sets the button style.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetStyle">
            <summary>
            Resets the Style property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.Orientation">
            <summary>
            Gets and sets the button orientation.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ResetOrientation">
            <summary>
            Resets the Orientation property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.Edge">
            <summary>
            Gets and sets the header edge to display the button against.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ContextMenuStrip">
            <summary>
            Gets and sets the context menu strip for the button.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.KryptonContextMenu">
            <summary>
            Gets and sets the krypton context menu for the button.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.KryptonCommand">
            <summary>
            Gets and sets the associated KryptonCommand.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.Owner">
            <summary>
            Gets and sets user-defined data associated with the object.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.Tag">
            <summary>
            Gets and sets user-defined data associated with the object.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.CopyFrom(Krypton.Toolkit.ButtonSpec)">
            <summary>
            Value copy from the provided source to self.
            </summary>
            <param name="source">Source instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.PerformClick">
            <summary>
            Generates a Click event for the control.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.PerformClick(System.EventArgs)">
            <summary>
            Generates a Click event for the control.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetImage(Krypton.Toolkit.IPalette,Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the button image.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <param name="state">State for which an image is needed.</param>
            <returns>Button image.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetImageTransparentColor(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the image transparent color.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetShortText(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button short text.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Short text string.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetLongText(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button long text.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Long text string.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetToolTipTitle(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button tooltip title text.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Tooltip title string.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetColorMap(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the color to remap from the image to the container foreground.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetStyle(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button style.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button style.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetOrientation(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button orientation.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button orientation.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetEdge(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the edge for the button.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button edge.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetLocation(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button location.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button location.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetEnabled(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button enabled state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button enabled state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.SetView(Krypton.Toolkit.ViewBase)">
            <summary>
            Sets the current view associated with the button spec.
            </summary>
            <param name="view">View element reference.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetView">
            <summary>
            Get the current view associated with the button spec.
            </summary>
            <returns>View element reference.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetViewEnabled">
            <summary>
            Gets a value indicating if the associated view is enabled.
            </summary>
            <returns>True if enabled; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetVisible(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button visible value.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button visibility.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GetChecked(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button checked state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button checked state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.GenerateClick(System.EventArgs)">
            <summary>
            Generates the Click event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.OnButtonSpecPropertyChanged(System.String)">
            <summary>
            Raises the ButtonSpecPropertyChanged event.
            </summary>
            <param name="propertyName">Name of the appearance property that has changed.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.OnCommandPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles a change in the property of an attached command.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpec.ProtectedType">
            <summary>
            Gets and sets the actual type of the button.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ConvertToRelativeEdgeAlign(Krypton.Toolkit.PaletteRelativeEdgeAlign)">
            <summary>
            Convert from palette specific edge alignment to resolved edge alignment.
            </summary>
            <param name="paletteRelativeEdgeAlign">Palette specific edge alignment.</param>
            <returns>Resolved edge alignment.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ConvertToButtonOrientation(Krypton.Toolkit.PaletteButtonOrientation)">
            <summary>
            Convert from palette specific button orientation to resolved button orientation.
            </summary>
            <param name="paletteButtonOrientation">Palette specific button orientation.</param>
            <returns>Resolved button orientation.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpec.ConvertToButtonStyle(Krypton.Toolkit.PaletteButtonStyle)">
            <summary>
            Convert from palette specific button style to resolved button style.
            </summary>
            <param name="paletteButtonStyle">Palette specific button style.</param>
            <returns>Resolve button style.</returns>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecAny">
            <summary>
            Button specification that can be assigned as any button type.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.#ctor">
            <summary>
            Initialize a new instance of the AnyButtonSpec class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.Clone">
            <summary>
            Make a clone of this object.
            </summary>
            <returns>New instance.</returns>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecAny.IsDefault">
            <summary>
            Gets a value indicating if all values are default.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecAny.Visible">
            <summary>
            Gets and sets if the button should be shown.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.ResetVisible">
            <summary>
            Resets the Visible property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecAny.Enabled">
            <summary>
            Gets and sets the button enabled state.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.ResetEnabled">
            <summary>
            Resets the Enabled property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecAny.Checked">
            <summary>
            Gets and sets if the button is checked or capable of being checked.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.ResetChecked">
            <summary>
            Resets the Checked property to its default value.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecAny.KryptonCommand">
            <summary>
            Gets and sets the associated KryptonCommand.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecAny.Type">
            <summary>
            Gets and sets the button type.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.ResetType">
            <summary>
            Resets the Type property to its default value.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.CopyFrom(Krypton.Toolkit.ButtonSpecAny)">
            <summary>
            Value copy form the provided source to ourself.
            </summary>
            <param name="source">Source instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.GetVisible(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button visible value.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button visibility.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.GetEnabled(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button enabled state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button enabled state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.GetChecked(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button checked state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button checked state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.OnButtonSpecPropertyChanged(System.String)">
            <summary>
            Raises the ButtonSpecPropertyChanged event.
            </summary>
            <param name="propertyName">Name of the appearance property that has changed.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.OnCommandPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles a change in the property of an attached command.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecAny.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecCalendar">
            <summary>
            Implementation for internal calendar buttons.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCalendar.#ctor(Krypton.Toolkit.ViewDrawMonth,Krypton.Toolkit.PaletteButtonSpecStyle,Krypton.Toolkit.RelativeEdgeAlign)">
            <summary>
            Initialize a new instance of the ButtonSpecCalendar class.
            </summary>
            <param name="month">Reference to owning view.</param>
            <param name="fixedStyle">Fixed style to use.</param>
            <param name="edge">Alignment edge.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCalendar.Visible">
            <summary>
            Gets and sets the visible state.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCalendar.Enabled">
            <summary>
            Gets and sets the enabled state.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCalendar.AllowComponent">
            <summary>
            Can a component be associated with the view.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCalendar.GetVisible(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button visible value.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button visibility.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCalendar.GetEnabled(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button enabled state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button enabled state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCalendar.GetChecked(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button checked state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button checked state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCalendar.GetEdge(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button edge to position against.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Edge position.</returns>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecCollectionBase">
            <summary>
            Manage a collection of ButtonSpec instances.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonSpecCollectionBase.Inserting">
            <summary>
            Occurs when a spec is about to be added/inserted to the collection.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonSpecCollectionBase.Inserted">
            <summary>
            Occurs when a spec has been added/inserted to the collection.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonSpecCollectionBase.Removing">
            <summary>
            Occurs when a spec is about to be removed from the collection.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonSpecCollectionBase.Removed">
            <summary>
            Occurs when a spec is removed from the collection.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollectionBase.#ctor(System.Object)">
            <summary>
            Initialize a new instance of the ButtonSpecCollectionBase class.
            </summary>
            <param name="owner">Reference to owning object instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollectionBase.Enumerate">
            <summary>
            Provide access to the derived generic enumerator.
            </summary>
            <returns>IEnumerable instance.</returns>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollectionBase.Owner">
            <summary>
            Gets and sets the owner of the collection.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollectionBase.OnInserting(Krypton.Toolkit.ButtonSpecEventArgs)">
            <summary>
            Raises the Inserting event.
            </summary>
            <param name="e">A NavButtonSpecEventArgs instance containing event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollectionBase.OnInserted(Krypton.Toolkit.ButtonSpecEventArgs)">
            <summary>
            Raises the Inserted event.
            </summary>
            <param name="e">A NavButtonSpecEventArgs instance containing event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollectionBase.OnRemoving(Krypton.Toolkit.ButtonSpecEventArgs)">
            <summary>
            Raises the Removing event.
            </summary>
            <param name="e">A NavButtonSpecEventArgs instance containing event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollectionBase.OnRemoved(Krypton.Toolkit.ButtonSpecEventArgs)">
            <summary>
            Raises the Removed event.
            </summary>
            <param name="e">A NavButtonSpecEventArgs instance containing event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecCollection`1">
            <summary>
            Manage a collection of ButtonSpec instances.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.#ctor(System.Object)">
            <summary>
            Initialize a new instance of the ButtonSpecCollection class.
            </summary>
            <param name="owner">Reference to owning object instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.ToString">
            <summary>
            Obtains the String representation of this instance.
            </summary>
            <returns>User readable name of the instance.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Add(System.Object)">
            <summary>
            Append a button spec to the collection.
            </summary>
            <param name="value">Object reference.</param>
            <returns>The position into which the new button spec was inserted.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.AddRange(`0[])">
            <summary>
            Append an array of button spec instances.
            </summary>
            <param name="array">Array of instances.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Contains(System.Object)">
            <summary>
            Determines whether the collection contains the button spec.
            </summary>
            <param name="value">Object reference.</param>
            <returns>True if button spec found; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.IndexOf(System.Object)">
            <summary>
            Determines the index of the specified spec in the collection.
            </summary>
            <param name="value">Object reference.</param>
            <returns>-1 if not found; otherwise index position.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a button spec to the collection at the specified index.
            </summary>
            <param name="index">Insert index.</param>
            <param name="value">Object reference.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size. 
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Remove(System.Object)">
            <summary>
            Removes first occurrence of specified object.
            </summary>
            <param name="value">Object reference.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the button spec at the specified index.
            </summary>
            <param name="index">Object index.</param>
            <returns>Object at specified index.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of the specified spec in the collection.
            </summary>
            <param name="item">T reference.</param>
            <returns>-1 if not found; otherwise index position.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a button spec to the collection at the specified index.
            </summary>
            <param name="index">Insert index.</param>
            <param name="item">T reference.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the button spec at the specified index.
            </summary>
            <param name="index">Remove index.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the button spec at the specified index.
            </summary>
            <param name="index">T index.</param>
            <returns>T at specified index.</returns>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollection`1.Item(System.String)">
            <summary>
            Gets the button spec with the provided unique name.
            </summary>
            <param name="uniqueName">Unique name of the ButtonSpec instance.</param>
            <returns>T at specified index.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Add(`0)">
            <summary>
            Append a button spec to the collection.
            </summary>
            <param name="item">T reference.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains the button spec.
            </summary>
            <param name="item">T reference.</param>
            <returns>True if spec found; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies button specs to specified array starting at particular index.
            </summary>
            <param name="array">Target array.</param>
            <param name="arrayIndex">Starting array index.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollection`1.Count">
            <summary>
            Gets the number of button specs in collection.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Remove(`0)">
            <summary>
            Removes first occurrence of specified spec.
            </summary>
            <param name="item">T reference.</param>
            <returns>True if removed; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current collection to the specified Array. 
            </summary>
            <param name="array">The Array that is the destination of the elements copied from the collection.</param>
            <param name="index">The index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Clear">
            <summary>
            Remove all pages from the collection.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection. 
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.Enumerate">
            <summary>
            Provide non generic access to the enumerator.
            </summary>
            <returns>IEnumerable instance.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.GetEnumerator">
            <summary>
            Shallow enumerate over button specs in the collection.
            </summary>
            <returns>Enumerator instance.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate using non-generic interface.
            </summary>
            <returns>Enumerator instance.</returns>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecFormFixed">
            <summary>
            Implementation for the fixed navigator buttons.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormFixed.#ctor(Krypton.Toolkit.KryptonForm,Krypton.Toolkit.PaletteButtonSpecStyle)">
            <summary>
            Initialize a new instance of the ButtonSpecFormFixed class.
            </summary>
            <param name="form">Reference to owning krypton form.</param>
            <param name="fixedStyle">Fixed style to use.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecFormFixed.AllowComponent">
            <summary>
            Can a component be associated with the view.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecFormFixed.KryptonForm">
            <summary>
            Gets access to the owning krypton form.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecFormFixed.ButtonSpecType">
            <summary>
            Gets and sets the actual type of the button.
            </summary>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecFormWindowClose">
            <summary>
            Implementation for the fixed close button for krypton form.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowClose.#ctor(Krypton.Toolkit.KryptonForm)">
            <summary>
            Initialize a new instance of the ButtonSpecFormWindowClose class.
            </summary>
            <param name="form">Reference to owning krypton form instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowClose.GetVisible(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button visible value.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button visibility.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowClose.GetEnabled(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button enabled state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button enabled state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowClose.GetChecked(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button checked state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button checked state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowClose.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecFormWindowMax">
            <summary>
            Implementation for the fixed maximize button for krypton form.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMax.#ctor(Krypton.Toolkit.KryptonForm)">
            <summary>
            Initialize a new instance of the ButtonSpecFormWindowMax class.
            </summary>
            <param name="form">Reference to owning krypton form instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMax.GetVisible(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button visible value.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button visibility.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMax.GetEnabled(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button enabled state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button enabled state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMax.GetChecked(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button checked state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button checked state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMax.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecFormWindowMin">
            <summary>
            Implementation for the fixed minimize button for krypton form.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMin.#ctor(Krypton.Toolkit.KryptonForm)">
            <summary>
            Initialize a new instance of the ButtonSpecFormWindowMin class.
            </summary>
            <param name="form">Reference to owning krypton form instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMin.GetVisible(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button visible value.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button visibility.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMin.GetEnabled(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button enabled state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button enabled state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMin.GetChecked(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button checked state.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button checked state.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecFormWindowMin.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecHeaderGroup">
            <summary>
            KryptonHeaderGroup specific implementation of a button specification.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecHeaderGroup.#ctor">
            <summary>
            Initialize a new instance of the HeaderGroupButtonSpec class.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecHeaderGroup.IsDefault">
            <summary>
            Gets a value indicating if all values are default.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecHeaderGroup.HeaderLocation">
            <summary>
            Gets and sets if the button header location.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecHeaderGroup.ResetHeaderLocation">
            <summary>
            Resets the HeaderLocation property to its default value.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecHeaderGroup.CopyFrom(Krypton.Toolkit.ButtonSpecHeaderGroup)">
            <summary>
            Value copy form the provided source to our self.
            </summary>
            <param name="source">Source instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecHeaderGroup.GetLocation(Krypton.Toolkit.IPalette)">
            <summary>
            Gets the button location value.
            </summary>
            <param name="palette">Palette to use for inheriting values.</param>
            <returns>Button location.</returns>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecManagerBase">
            <summary>
            Manage a collection of button specs for placing within a collection of docking views.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.#ctor(System.Windows.Forms.Control,Krypton.Toolkit.PaletteRedirect,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.IPaletteMetric[],Krypton.Toolkit.PaletteMetricInt[],Krypton.Toolkit.PaletteMetricInt[],Krypton.Toolkit.PaletteMetricPadding[],Krypton.Toolkit.GetToolStripRenderer,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the ButtonSpecManagerBase class.
            </summary>
            <param name="control">Control that owns the button manager.</param>
            <param name="redirector">Palette redirector.</param>
            <param name="variableSpecs">Variable set of button specifications.</param>
            <param name="fixedSpecs">Fixed set of button specifications.</param>
            <param name="viewMetrics">Array of target metric providers.</param>
            <param name="viewMetricIntOutside">Array of target metrics for outside spacer size.</param>
            <param name="viewMetricIntInside">Array of target metrics for inside spacer size.</param>
            <param name="viewMetricPaddings">Array of target metrics for button padding.</param>
            <param name="getRenderer">Delegate for returning a tool strip renderer.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerBase.Control">
            <summary>
            Gets the owning control.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerBase.ToolTipManager">
            <summary>
            Gets and sets the associated tooltip manager.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerBase.NeedPaint">
            <summary>
            Gets and sets the need paint delegate for notifying paint requests.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerBase.ButtonSpecViews">
            <summary>
            Gets an array containing references of all the current views.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.Construct">
            <summary>
            Perform once only construction.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.Destruct">
            <summary>
            Destruct the previously created views.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerBase.UseMnemonic">
            <summary>
            Gets and sets the use of mnemonics.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.RecreateButtons">
            <summary>
            Requests that all the buttons be recreated.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.RefreshButtons">
            <summary>
            Requests that all the buttons have state refreshed.
            </summary>
            <returns>True if a state change was made.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.RefreshButtons(System.Boolean)">
            <summary>
            Requests that all the buttons have state refreshed.
            </summary>
            <param name="composition">Composition value for the spec view.</param>
            <returns>True if a state change was made.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            <param name="charCode">The mnemonic character entered.</param>
            <returns>true if the mnemonic was processed; otherwise, false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.SetDockerMetrics(Krypton.Toolkit.ViewBase,Krypton.Toolkit.IPaletteMetric)">
            <summary>
            Update the palette for a specified docker view.
            </summary>
            <param name="viewDocker">Target docker view.</param>
            <param name="viewMetric">New metric source.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.SetDockerMetrics(Krypton.Toolkit.ViewBase,Krypton.Toolkit.IPaletteMetric,Krypton.Toolkit.PaletteMetricInt,Krypton.Toolkit.PaletteMetricPadding)">
            <summary>
            Update the metric details for a specified docker view.
            </summary>
            <param name="viewDocker">Target docker view.</param>
            <param name="viewMetric">New metric source.</param>
            <param name="viewMetricInt">New border edge metric.</param>
            <param name="viewMetricPadding">New button border metric.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.GetButtonRectangle(Krypton.Toolkit.ButtonSpec)">
            <summary>
            Get the display rectangle of the provided button.
            </summary>
            <param name="buttonSpec">Button specification.</param>
            <returns>Display rectangle.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.ButtonSpecFromView(Krypton.Toolkit.ViewBase)">
            <summary>
            Gets the ButtonSpec associated with the provided view element.
            </summary>
            <param name="element">Element to search against.</param>
            <returns>Reference to ButtonSpec; otherwise null.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.DesignerGetHitTest(System.Drawing.Point)">
            <summary>
            Is the provided over a part of the view that wants the mouse.
            </summary>
            <param name="pt">Mouse point.</param>
            <returns>True if the view wants the mouse position; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.RenderToolStrip">
            <summary>
            Get a tool strip renderer appropriate for the hosting control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.PerformNeedPaint(System.Boolean)">
            <summary>
            Requests a repaint and optional layout be performed.
            </summary>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.PerformNeedPaint(System.Object,System.Boolean)">
            <summary>
            Requests a repaint and optional layout be performed.
            </summary>
            <param name="sender">Source of the paint event.</param>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.GetButtonSpecFromView(Krypton.Toolkit.ViewDrawButton)">
            <summary>
            Find the ButtonSpec definition associated with the provided button view.
            </summary>
            <param name="viewButton">View to use when searching.</param>
            <returns>ButtonSpec reference if found; otherwise null.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.GetFirstVisibleViewButton(Krypton.Toolkit.PaletteRelativeEdgeAlign)">
            <summary>
            Gets the view for the first visible and enabled button spec of the defined edge.
            </summary>
            <param name="align">Edge of buttons caller is interested in searching.</param>
            <returns>ViewDrawButton reference; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.GetNextVisibleViewButton(Krypton.Toolkit.PaletteRelativeEdgeAlign,Krypton.Toolkit.ViewDrawButton)">
            <summary>
            Gets the view for the next visible and enabled button spec of the defined edge.
            </summary>
            <param name="align">Edge of buttons caller is interested in searching.</param>
            <param name="current">Current button that is the marker for searching.</param>
            <returns>ViewDrawButton reference; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.GetPreviousVisibleViewButton(Krypton.Toolkit.PaletteRelativeEdgeAlign,Krypton.Toolkit.ViewDrawButton)">
            <summary>
            Gets the view for the previous visible and enabled button spec of the defined edge.
            </summary>
            <param name="align">Edge of buttons caller is interested in searching.</param>
            <param name="current">Current button that is the marker for searching.</param>
            <returns>ViewDrawButton reference; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.GetLastVisibleViewButton(Krypton.Toolkit.PaletteRelativeEdgeAlign)">
            <summary>
            Gets the view for the last visible and enabled button spec of the defined edge.
            </summary>
            <param name="align">Edge of buttons caller is interested in searching.</param>
            <returns>ViewDrawButton reference; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.CreateButtonSpecRemap(Krypton.Toolkit.PaletteRedirect,Krypton.Toolkit.ButtonSpec)">
            <summary>
            Create a palette redirector for remapping button spec colors.
            </summary>
            <param name="redirector">Base palette class.</param>
            <param name="buttonSpec">ButtonSpec instance.</param>
            <returns>Palette redirector for the button spec instance.</returns>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerBase.UseInsideSpacers">
            <summary>
            Gets a value indicating if inside edge spacers are required.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerBase.DockerCount">
            <summary>
            Gets the number of dockers.
            </summary>
            <returns>Number of dockers.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.DockerIndex(Krypton.Toolkit.ViewBase)">
            <summary>
            Gets the index of the provided docker.
            </summary>
            <param name="viewDocker">View docker reference.</param>
            <returns>Index of docker; otherwise -1.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.IndexDocker(System.Int32)">
            <summary>
            Gets the docker at the specified index.
            </summary>
            <param name="i">Index.</param>
            <returns>View docker reference; otherwise null.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.DockerOrientation(System.Int32)">
            <summary>
            Gets the orientation of the docker at the specified index.
            </summary>
            <param name="i">Index.</param>
            <returns>VisualOrientation value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.GetDockerForeground(System.Int32)">
            <summary>
            Gets the element that represents the foreground colour.
            </summary>
            <param name="i">Index.</param>
            <returns>View content instance.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.AddViewToDocker(System.Int32,Krypton.Toolkit.ViewDockStyle,Krypton.Toolkit.ViewBase,System.Boolean)">
            <summary>
            Add a view element to a docker.
            </summary>
            <param name="i">Index of view docker.</param>
            <param name="dockStyle">Dock style for placement.</param>
            <param name="view">Actual view to add.</param>
            <param name="usingSpacers">Are view spacers being used.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.AddSpacersToDocker(System.Int32,Krypton.Toolkit.ViewLayoutMetricSpacer,Krypton.Toolkit.ViewLayoutMetricSpacer)">
            <summary>
            Add the spacing views into the indexed docker.
            </summary>
            <param name="i">Index of docker.</param>
            <param name="spacerL">Spacer for the left side.</param>
            <param name="spacerR">Spacer for the right side.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.ButtonSpecCreated(Krypton.Toolkit.ButtonSpec,Krypton.Toolkit.ButtonSpecView,System.Int32)">
            <summary>
            Perform final steps now that the button spec has been created.
            </summary>
            <param name="buttonSpec">ButtonSpec instance.</param>
            <param name="buttonView">Associated ButtonSpecView instance.</param>
            <param name="viewDockerIndex">Index of view docker button is placed onto.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.CreateButtonSpecView(Krypton.Toolkit.PaletteRedirect,Krypton.Toolkit.IPaletteMetric,Krypton.Toolkit.PaletteMetricPadding,Krypton.Toolkit.ButtonSpec)">
            <summary>
            Create the button spec view appropriate for the button spec.
            </summary>
            <param name="redirector">Redirector for acquiring palette values.</param>
            <param name="viewPaletteMetric">Target metric providers.</param>
            <param name="viewMetricPadding">Target metric padding.</param>
            <param name="buttonSpec">ButtonSpec instance.</param>
            <returns>ButtonSpecView derived class.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerBase.OnNeedPaint(System.Object,System.Boolean)">
            <summary>
            Raises the NeedPaint event.
            </summary>
            <param name="sender">Source of the paint event.</param>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecManagerDraw">
            <summary>
            Manage a collection of button specs for placing within a collection of ViewDrawDocker instances.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerDraw.#ctor(System.Windows.Forms.Control,Krypton.Toolkit.PaletteRedirect,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ViewDrawDocker[],Krypton.Toolkit.IPaletteMetric[],Krypton.Toolkit.PaletteMetricInt[],Krypton.Toolkit.PaletteMetricPadding[],Krypton.Toolkit.GetToolStripRenderer,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the ButtonSpecManagerDraw class.
            </summary>
            <param name="control">Control that owns the button manager.</param>
            <param name="redirector">Palette redirector.</param>
            <param name="variableSpecs">Variable set of button specifications.</param>
            <param name="fixedSpecs">Fixed set of button specifications.</param>
            <param name="viewDockers">Array of target view dockers.</param>
            <param name="viewMetrics">Array of target metric providers.</param>
            <param name="viewMetricInt">Array of target metrics for outside/inside spacer size.</param>
            <param name="viewMetricPaddings">Array of target metrics for button padding.</param>
            <param name="getRenderer">Delegate for returning a tool strip renderer.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerDraw.#ctor(System.Windows.Forms.Control,Krypton.Toolkit.PaletteRedirect,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ViewDrawDocker[],Krypton.Toolkit.IPaletteMetric[],Krypton.Toolkit.PaletteMetricInt[],Krypton.Toolkit.PaletteMetricInt[],Krypton.Toolkit.PaletteMetricPadding[],Krypton.Toolkit.GetToolStripRenderer,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the ButtonSpecManagerDraw class.
            </summary>
            <param name="control">Control that owns the button manager.</param>
            <param name="redirector">Palette redirector.</param>
            <param name="variableSpecs">Variable set of button specifications.</param>
            <param name="fixedSpecs">Fixed set of button specifications.</param>
            <param name="viewDockers">Array of target view dockers.</param>
            <param name="viewMetrics">Array of target metric providers.</param>
            <param name="viewMetricIntOutside">Array of target metrics for outside spacer size.</param>
            <param name="viewMetricIntInside">Array of target metrics for inside spacer size.</param>
            <param name="viewMetricPaddings">Array of target metrics for button padding.</param>
            <param name="getRenderer">Delegate for returning a tool strip renderer.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerDraw.DockerCount">
            <summary>
            Gets the number of dockers.
            </summary>
            <returns>Number of dockers.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerDraw.DockerIndex(Krypton.Toolkit.ViewBase)">
            <summary>
            Gets the index of the provided docker.
            </summary>
            <param name="viewDocker">View docker reference.</param>
            <returns>Index of docker; otherwise -1.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerDraw.IndexDocker(System.Int32)">
            <summary>
            Gets the docker at the specified index.
            </summary>
            <param name="i">Index.</param>
            <returns>View docker reference; otherwise null.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerDraw.DockerOrientation(System.Int32)">
            <summary>
            Gets the orientation of the docker at the specified index.
            </summary>
            <param name="i">Index.</param>
            <returns>VisualOrientation value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerDraw.GetDockerForeground(System.Int32)">
            <summary>
            Gets the element that represents the foreground color.
            </summary>
            <param name="i">Index.</param>
            <returns>View content instance.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerDraw.AddViewToDocker(System.Int32,Krypton.Toolkit.ViewDockStyle,Krypton.Toolkit.ViewBase,System.Boolean)">
            <summary>
            Add a view element to a docker.
            </summary>
            <param name="i">Index of view docker.</param>
            <param name="dockStyle">Dock style for placement.</param>
            <param name="view">Actual view to add.</param>
            <param name="usingSpacers">Are view spacers being used.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerDraw.AddSpacersToDocker(System.Int32,Krypton.Toolkit.ViewLayoutMetricSpacer,Krypton.Toolkit.ViewLayoutMetricSpacer)">
            <summary>
            Add the spacing views into the indexed docker.
            </summary>
            <param name="i">Index of docker.</param>
            <param name="spacerL">Spacer for the left side.</param>
            <param name="spacerR">Spacer for the right side.</param>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecManagerLayout">
            <summary>
            Manage a collection of button specs for placing within a collection of ViewLayoutDocker instances.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerLayout.#ctor(System.Windows.Forms.Control,Krypton.Toolkit.PaletteRedirect,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ViewLayoutDocker[],Krypton.Toolkit.IPaletteMetric[],Krypton.Toolkit.PaletteMetricInt[],Krypton.Toolkit.PaletteMetricPadding[],Krypton.Toolkit.GetToolStripRenderer,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the ButtonSpecManagerLayout class.
            </summary>
            <param name="control">Control that owns the button manager.</param>
            <param name="redirector">Palette redirector.</param>
            <param name="variableSpecs">Variable set of button specifications.</param>
            <param name="fixedSpecs">Fixed set of button specifications.</param>
            <param name="viewDockers">Array of target view dockers.</param>
            <param name="viewMetrics">Array of target metric providers.</param>
            <param name="viewMetricInt">Array of target metrics for outside/inside spacer size.</param>
            <param name="viewMetricPaddings">Array of target metrics for button padding.</param>
            <param name="getRenderer">Delegate for returning a tool strip renderer.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerLayout.#ctor(System.Windows.Forms.Control,Krypton.Toolkit.PaletteRedirect,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ButtonSpecCollectionBase,Krypton.Toolkit.ViewLayoutDocker[],Krypton.Toolkit.IPaletteMetric[],Krypton.Toolkit.PaletteMetricInt[],Krypton.Toolkit.PaletteMetricInt[],Krypton.Toolkit.PaletteMetricPadding[],Krypton.Toolkit.GetToolStripRenderer,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the ButtonSpecManagerLayout class.
            </summary>
            <param name="control">Control that owns the button manager.</param>
            <param name="redirector">Palette redirector.</param>
            <param name="variableSpecs">Variable set of button specifications.</param>
            <param name="fixedSpecs">Fixed set of button specifications.</param>
            <param name="viewDockers">Array of target view dockers.</param>
            <param name="viewMetrics">Array of target metric providers.</param>
            <param name="viewMetricIntOutside">Array of target metrics for outside spacer size.</param>
            <param name="viewMetricIntInside">Array of target metrics for inside spacer size.</param>
            <param name="viewMetricPaddings">Array of target metrics for button padding.</param>
            <param name="getRenderer">Delegate for returning a tool strip renderer.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecManagerLayout.DockerCount">
            <summary>
            Gets the number of dockers.
            </summary>
            <returns>Number of dockers.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerLayout.DockerIndex(Krypton.Toolkit.ViewBase)">
            <summary>
            Gets the index of the provided docker.
            </summary>
            <param name="viewDocker">View docker reference.</param>
            <returns>Index of docker; otherwise -1.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerLayout.IndexDocker(System.Int32)">
            <summary>
            Gets the docker at the specified index.
            </summary>
            <param name="i">Index.</param>
            <returns>View docker reference; otherwise null.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerLayout.DockerOrientation(System.Int32)">
            <summary>
            Gets the orientation of the docker at the specified index.
            </summary>
            <param name="i">Index.</param>
            <returns>VisualOrientation value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerLayout.GetDockerForeground(System.Int32)">
            <summary>
            Gets the element that represents the foreground color.
            </summary>
            <param name="i">Index.</param>
            <returns>View content instance.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerLayout.AddViewToDocker(System.Int32,Krypton.Toolkit.ViewDockStyle,Krypton.Toolkit.ViewBase,System.Boolean)">
            <summary>
            Add a view element to a docker.
            </summary>
            <param name="i">Index of view docker.</param>
            <param name="dockStyle">Dock style for placement.</param>
            <param name="view">Actual view to add.</param>
            <param name="usingSpacers">Are view spacers being used.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecManagerLayout.AddSpacersToDocker(System.Int32,Krypton.Toolkit.ViewLayoutMetricSpacer,Krypton.Toolkit.ViewLayoutMetricSpacer)">
            <summary>
            Add the spacing views into the indexed docker.
            </summary>
            <param name="i">Index of docker.</param>
            <param name="spacerL">Spacer for the left side.</param>
            <param name="spacerR">Spacer for the right side.</param>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecRemapByContentBase">
            <summary>
            Redirect requests for image/text colors to remap.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentBase.#ctor(Krypton.Toolkit.IPalette,Krypton.Toolkit.ButtonSpec)">
            <summary>
            Initialize a new instance of the ButtonSpecRemapByContentBase class.
            </summary>
            <param name="target">Initial palette target for redirection.</param>
            <param name="buttonSpec">Reference to button specification.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecRemapByContentBase.PaletteContent">
            <summary>
            Gets the palette content to use for remapping.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecRemapByContentBase.PaletteState">
            <summary>
            Gets the state of the remapping area
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentBase.GetContentImageColorMap(Krypton.Toolkit.PaletteContentStyle,Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the image color to remap into another color.
            </summary>
            <param name="style">Content style.</param>
            <param name="state">Palette value should be applicable to this state.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentBase.GetContentImageColorTo(Krypton.Toolkit.PaletteContentStyle,Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the color to use in place of the image map color.
            </summary>
            <param name="style">Content style.</param>
            <param name="state">Palette value should be applicable to this state.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentBase.GetContentShortTextColor1(Krypton.Toolkit.PaletteContentStyle,Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the first back color for the short text.
            </summary>
            <param name="style">Content style.</param>
            <param name="state">Palette value should be applicable to this state.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentBase.GetContentLongTextColor1(Krypton.Toolkit.PaletteContentStyle,Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the first back color for the long text.
            </summary>
            <param name="style">Content style.</param>
            <param name="state">Palette value should be applicable to this state.</param>
            <returns>Color value.</returns>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecRemapByContentCache">
            <summary>
            Redirect requests for image/text colors to remap.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentCache.#ctor(Krypton.Toolkit.IPalette,Krypton.Toolkit.ButtonSpec)">
            <summary>
            Initialize a new instance of the ButtonSpecRemapByContentCache class.
            </summary>
            <param name="target">Initial palette target for redirection.</param>
            <param name="buttonSpec">Reference to button specification.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentCache.SetPaletteContent(Krypton.Toolkit.IPaletteContent)">
            <summary>
            Set the palette content to use for remapping.
            </summary>
            <param name="paletteContent">Palette for requesting foreground colors.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentCache.SetPaletteState(Krypton.Toolkit.PaletteState)">
            <summary>
            Set the palette state of the remapping element.
            </summary>
            <param name="paletteState">Palette state.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecRemapByContentCache.PaletteContent">
            <summary>
            Gets the palette content to use for remapping.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecRemapByContentCache.PaletteState">
            <summary>
            Gets the state of the remapping area
            </summary>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecRemapByContentView">
            <summary>
            Redirect requests for image/text colors to remap.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecRemapByContentView.#ctor(Krypton.Toolkit.IPalette,Krypton.Toolkit.ButtonSpec)">
            <summary>
            Initialize a new instance of the ButtonSpecRemapByContentView class.
            </summary>
            <param name="target">Initial palette target for redirection.</param>
            <param name="buttonSpec">Reference to button specification.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecRemapByContentView.Foreground">
            <summary>
            Gets and sets the foreground to use for color map redirection.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecRemapByContentView.PaletteContent">
            <summary>
            Gets the palette content to use for remapping.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecRemapByContentView.PaletteState">
            <summary>
            Gets the state of the remapping area
            </summary>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecToContent">
            <summary>
            Map button spec tooltip value to content values.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecToContent.#ctor(Krypton.Toolkit.IPalette,Krypton.Toolkit.ButtonSpec)">
            <summary>
            Initialize a new instance of the PageToTooltipMapping class.
            </summary>
            <param name="palette">Palette for sourcing information.</param>
            <param name="buttonSpec">Source button spec instance.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecToContent.HasContent">
            <summary>
            Gets a value indicating if the mapping produces any content.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecToContent.GetImage(Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the content image.
            </summary>
            <param name="state">The state for which the image is needed.</param>
            <returns>Image value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecToContent.GetImageTransparentColor(Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the image color that should be transparent.
            </summary>
            <param name="state">The state for which the image is needed.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecToContent.GetShortText">
            <summary>
            Gets the content short text.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecToContent.GetLongText">
            <summary>
            Gets the content long text.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecView">
            <summary>
            Create and manage the view for a ButtonSpec definition.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.#ctor(Krypton.Toolkit.PaletteRedirect,Krypton.Toolkit.IPaletteMetric,Krypton.Toolkit.PaletteMetricPadding,Krypton.Toolkit.ButtonSpecManagerBase,Krypton.Toolkit.ButtonSpec)">
            <summary>
            Initialize a new instance of the ButtonSpecView class.
            </summary>
            <param name="redirector">Palette redirector.</param>
            <param name="paletteMetric">Source for metric values.</param>
            <param name="metricPadding">Padding metric for border padding.</param>
            <param name="manager">Reference to owning manager.</param>
            <param name="buttonSpec">Access</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecView.Manager">
            <summary>
            Gets access to the owning manager.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecView.ButtonSpec">
            <summary>
            Gets access to the monitored button spec
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecView.ViewCenter">
            <summary>
            Gets access to the view centering that contains the button.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecView.ViewButton">
            <summary>
            Gets access to the view centering that contains the button.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecView.RemapPalette">
            <summary>
            Gets access to the remapping palette.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecView.DrawButtonSpecOnComposition">
            <summary>
            Gets and sets the composition setting for the button.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.PerformNeedPaint(System.Boolean)">
            <summary>
            Requests a repaint and optional layout be performed.
            </summary>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.UpdateButtonStyle">
            <summary>
            Update the button style to reflect new button style setting.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.UpdateVisible">
            <summary>
            Update view button to reflect new button visible setting.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.UpdateEnabled">
            <summary>
            Update view button to reflect new button enabled setting.
            </summary>
            <returns>True is a change in state has occurred.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.UpdateChecked">
            <summary>
            Update view button to reflect new button checked setting.
            </summary>
            <returns>True is a change in state has occurred.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.Destruct">
            <summary>
            Destruct the previously created views.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.CreateController(Krypton.Toolkit.ViewDrawButton,Krypton.Toolkit.NeedPaintHandler,System.Windows.Forms.MouseEventHandler)">
            <summary>
            Create a button controller for the view.
            </summary>
            <param name="viewButton">View to be controlled.</param>
            <param name="needPaint">Paint delegate.</param>
            <param name="clickHandler">Reference to click handler.</param>
            <returns>Controller instance.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.OnFinishDelegate(System.Object,System.EventArgs)">
            <summary>
            Processes the finish of the button being pressed.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.GetImage(Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the content image.
            </summary>
            <param name="state">The state for which the image is needed.</param>
            <returns>Image value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.GetImageTransparentColor(Krypton.Toolkit.PaletteState)">
            <summary>
            Gets the content image transparent color.
            </summary>
            <param name="state">The state for which the image color is needed.</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.GetShortText">
            <summary>
            Gets the content short text.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecView.GetLongText">
            <summary>
            Gets the content long text.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="T:Krypton.Toolkit.ButtonSpecViewControllers">
            <summary>
            Stores a triple of controller references.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonSpecViewControllers.#ctor(Krypton.Toolkit.IMouseController,Krypton.Toolkit.ISourceController,Krypton.Toolkit.IKeyController)">
            <summary>
            Initialize a new instance of the ButtonSpecViewControllers class.
            </summary>
            <param name="mouseController">Mouse controller.</param>
            <param name="sourceController">Source controller.</param>
            <param name="keyController">Key controller.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecViewControllers.MouseController">
            <summary>
            Gets the mouse controller reference.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecViewControllers.SourceController">
            <summary>
            Gets the mouse controller reference.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonSpecViewControllers.KeyController">
            <summary>
            Gets the mouse controller reference.
            </summary>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuCheckBox">
            <summary>
            Provide a context menu check box.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuCheckBox.Click">
            <summary>
            Occurs when the check box item is clicked.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuCheckBox.CheckedChanged">
            <summary>
            Occurs when the value of the Checked property has changed.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuCheckBox.CheckStateChanged">
            <summary>
            Occurs when the value of the CheckState property has changed.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuCheckBox class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.#ctor(System.String)">
            <summary>
            Initialize a new instance of the KryptonContextMenuCheckBox class.
            </summary>
            <param name="initialText">Initial text for display.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.AutoClose">
            <summary>
            Gets and sets if clicking the check box automatically closes the context menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.Text">
            <summary>
            Gets and sets the check box text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.ExtraText">
            <summary>
            Gets and sets the check box extra text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.Image">
            <summary>
            Gets and sets the check box image.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.ImageTransparentColor">
            <summary>
            Gets and sets the check box image color to make transparent.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.LabelStyle">
            <summary>
            Gets and sets the check box label style.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.Images">
            <summary>
            Gets access to the image value overrides.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.Enabled">
            <summary>
            Gets and sets if the check box is enabled.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.Checked">
            <summary>
            Gets or sets a value indicating if the component is in the checked state.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.CheckState">
            <summary>
            Gets or sets a value indicating the checked state of the component.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.AutoCheck">
            <summary>
            Gets or sets a value indicating if the check box is automatically changed state when clicked. 
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.ThreeState">
            <summary>
            Gets or sets a value indicating if the component allows three states instead of two.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.StateCommon">
            <summary>
            Gets access to the common check box appearance that other states can override.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.StateDisabled">
            <summary>
            Gets access to the disabled check box appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.StateNormal">
            <summary>
            Gets access to the normal check box appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.OverrideFocus">
            <summary>
            Gets access to the check box appearance when it has focus.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckBox.KryptonCommand">
            <summary>
            Gets and sets the associated KryptonCommand.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.PerformClick">
            <summary>
            Generates a Click event for the component.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the CheckedChanged event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckBox.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Raises the CheckStateChanged event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuCheckButton">
            <summary>
            Provide a context menu check button.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuCheckButton.Click">
            <summary>
            Occurs when the check box item is clicked.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuCheckButton.CheckedChanged">
            <summary>
            Occurs when the value of the Checked property has changed.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckButton.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuCheckButton class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckButton.#ctor(System.String)">
            <summary>
            Initialize a new instance of the KryptonContextMenuCheckButton class.
            </summary>
            <param name="initialText">Initial text for display.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckButton.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckButton.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckButton.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.AutoClose">
            <summary>
            Gets and sets if clicking the check box automatically closes the context menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.Text">
            <summary>
            Gets and sets the check box text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.ExtraText">
            <summary>
            Gets and sets the check box extra text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.Image">
            <summary>
            Gets and sets the check box image.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.ImageTransparentColor">
            <summary>
            Gets and sets the check box image color to make transparent.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.ButtonStyle">
            <summary>
            Gets and sets the check button style.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.Enabled">
            <summary>
            Gets and sets if the check box is enabled.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.Checked">
            <summary>
            Gets or sets a value indicating if the component is in the checked state.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.AutoCheck">
            <summary>
            Gets or sets a value indicating if the check box is automatically changed state when clicked. 
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.StateCommon">
            <summary>
            Gets access to the common button appearance that other states can override.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.StateDisabled">
            <summary>
            Gets access to the disabled button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.StateNormal">
            <summary>
            Gets access to the normal button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.StatePressed">
            <summary>
            Gets access to the pressed button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.StateTracking">
            <summary>
            Gets access to the tracking button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.StateCheckedNormal">
            <summary>
            Gets access to the normal checked button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.StateCheckedTracking">
            <summary>
            Gets access to the hot tracking checked button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.StateCheckedPressed">
            <summary>
            Gets access to the pressed checked button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.OverrideFocus">
            <summary>
            Gets access to the button appearance when it has focus.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCheckButton.KryptonCommand">
            <summary>
            Gets and sets the associated KryptonCommand.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckButton.PerformClick">
            <summary>
            Generates a Click event for the component.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckButton.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCheckButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the CheckedChanged event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuCollection">
            <summary>
            Manage the items that can be added to a top level context menu collection.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuCollection.RestrictTypes">
            <summary>
            Gets an array of types that the collection is restricted to contain.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCollection.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCollection.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Create view elements appropriate for the collection items.
            </summary>
            <param name="provider">Context menu information provider.</param>
            <param name="parent">Parent object.</param>
            <param name="columns">Collection of columns to create view inside.</param>
            <param name="standardStyle">Should the standard style be applied.</param>
            <param name="imageColumn">Should the image column be applied.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCollection.OnInserted(Krypton.Toolkit.TypedCollectionEventArgs{Krypton.Toolkit.KryptonContextMenuItemBase})">
            <summary>
            Raises the Inserted event.
            </summary>
            <param name="e">A TypedCollectionEventArgs instance containing event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuCollection.OnRemoving(Krypton.Toolkit.TypedCollectionEventArgs{Krypton.Toolkit.KryptonContextMenuItemBase})">
            <summary>
            Raises the Removing event.
            </summary>
            <param name="e">A TypedCollectionEventArgs instance containing event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuItemCollection">
            <summary>
            Manage the items that can be added to a standard menu item collection.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItemCollection.RestrictTypes">
            <summary>
            Gets an array of types that the collection is restricted to contain.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItemCollection.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuColorColumns">
            <summary>
            Provide a set of color columns for the context menu.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuColorColumns.SelectedColorChanged">
            <summary>
            Occurs when the SelectedColor property changes value.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuColorColumns.TrackingColor">
            <summary>
            Occurs when the user is tracking over a color.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuColorColumns class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.#ctor(Krypton.Toolkit.ColorScheme)">
            <summary>
            Initialize a new instance of the KryptonContextMenuColorColumns class.
            </summary>
            <param name="scheme">Required color scheme of colors.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuColorColumns.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuColorColumns.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuColorColumns.AutoClose">
            <summary>
            Gets and sets if clicking a color entry automatically closes the context menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuColorColumns.ColorScheme">
            <summary>
            Gets and sets the required color scheme.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuColorColumns.SelectedColor">
            <summary>
            Gets and sets the user selected color.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuColorColumns.BlockSize">
            <summary>
            Gets and sets the size of each color block.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuColorColumns.GroupNonFirstRows">
            <summary>
            Gets and sets if all but the first row should be group together.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.SetCustomColors(System.Drawing.Color[][])">
            <summary>
            Define a custom set of colors for display.
            </summary>
            <param name="colors">An array of color arrays, each of which must be the same length.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.ContainsColor(System.Drawing.Color)">
            <summary>
            Does the provided color exist in the definition.
            </summary>
            <param name="color">Color to find.</param>
            <returns>True if found; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.OnSelectedColorChanged(Krypton.Toolkit.ColorEventArgs)">
            <summary>
            Raises the SelectedColorChanged event.
            </summary>
            <param name="e">An ColorEventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuColorColumns.OnTrackingColor(Krypton.Toolkit.ColorEventArgs)">
            <summary>
            Raises the TrackingColor event.
            </summary>
            <param name="e">An ColorEventArgs that contains the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuHeading">
            <summary>
            Provide a context menu heading.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuHeading.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuHeading class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuHeading.#ctor(System.String)">
            <summary>
            Initialize a new instance of the KryptonContextMenuHeading class.
            </summary>
            <param name="initialText">Initial text for display.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuHeading.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuHeading.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuHeading.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuHeading.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuHeading.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuHeading.Text">
            <summary>
            Gets and sets the heading menu item text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuHeading.ExtraText">
            <summary>
            Gets and sets the heading menu item extra text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuHeading.Image">
            <summary>
            Gets and sets the heading menu item image.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuHeading.ImageTransparentColor">
            <summary>
            Gets and sets the heading image color to make transparent.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuHeading.StateNormal">
            <summary>
            Gets access to the header instance specific appearance values.
            </summary>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuImageSelect">
            <summary>
            Provide a context menu image select.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuImageSelect.SelectedIndexChanged">
            <summary>
            Occurs when the value of the SelectedIndex property changes.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuImageSelect.TrackingImage">
            <summary>
            Occurs when the user is tracking over a color.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuImageSelect.Click">
            <summary>
            Occurs when the value of the SelectedIndex property changes.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuImageSelect.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuImageSelect class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuImageSelect.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuImageSelect.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuImageSelect.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.Padding">
            <summary>
            Gets and sets padding around the image selection area.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.AutoClose">
            <summary>
            Gets and sets if selecting an image automatically closes the context menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.SelectedIndex">
            <summary>
            Gets access to the collection of images for display and selection.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.ButtonStyle">
            <summary>
            Gets and sets the button style used for each image item.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.ImageList">
            <summary>
            Gets access to the collection of images for display and selection.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.ImageIndexStart">
            <summary>
            Gets and sets the index of first image in the ImageList for display.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.ImageIndexEnd">
            <summary>
            Gets and sets the index of last image in the ImageList for display.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuImageSelect.LineItems">
            <summary>
            Gets and sets the number of items to place on each display line.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuImageSelect.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the SelectedIndexChanged event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuImageSelect.OnTrackingImage(Krypton.Toolkit.ImageSelectEventArgs)">
            <summary>
            Raises the SelectedIndexChanged event.
            </summary>
            <param name="e">An ImageSelectEventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuImageSelect.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuItem">
            <summary>
            Provide a standard menu item.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuItem.Click">
            <summary>
            Occurs when the menu item is clicked.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuItem.CheckedChanged">
            <summary>
            Occurs when the menu item is clicked.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuItem.CheckStateChanged">
            <summary>
            Occurs when the menu item is clicked.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuItem class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.#ctor(System.String)">
            <summary>
            Initialize a new instance of the KryptonContextMenuItem class.
            </summary>
            <param name="initialText">Initial text string.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Initialize a new instance of the KryptonContextMenuItem class.
            </summary>
            <param name="initialText">Initial text string.</param>
            <param name="clickHandler">Click handler.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Keys)">
            <summary>
            Initialize a new instance of the KryptonContextMenuItem class.
            </summary>
            <param name="initialText">Initial text string.</param>
            <param name="clickHandler">Click handler.</param>
            <param name="shortcut">Shortcut key combination.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.#ctor(System.String,System.Drawing.Image,System.EventHandler)">
            <summary>
            Initialize a new instance of the KryptonContextMenuItem class.
            </summary>
            <param name="initialText">Initial text string.</param>
            <param name="initialImage">Initial image.</param>
            <param name="clickHandler">Click handler.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.#ctor(System.String,System.Drawing.Image,System.EventHandler,System.Windows.Forms.Keys)">
            <summary>
            Initialize a new instance of the KryptonContextMenuItem class.
            </summary>
            <param name="initialText">Initial text string.</param>
            <param name="initialImage">Initial image.</param>
            <param name="clickHandler">Click handler.</param>
            <param name="shortcut">Shortcut key combination.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.Text">
            <summary>
            Gets and sets the standard menu item text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.ExtraText">
            <summary>
            Gets and sets the standard menu item extra text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.Image">
            <summary>
            Gets and sets the standard menu item image.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.ImageTransparentColor">
            <summary>
            Gets and sets the heading image color to make transparent.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.ShortcutKeys">
            <summary>
            Gets and sets the shortcut key combination associated with the menu item.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.AutoClose">
            <summary>
            Gets and sets if clicking the menu item automatically closes the context menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.SplitSubMenu">
            <summary>
            Gets and sets whether the menu item toggles checked state when clicked.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.CheckOnClick">
            <summary>
            Gets and sets if the shortcut display text is shown.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.ShowShortcutKeys">
            <summary>
            Gets and sets if the shortcut display text is shown.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.LargeKryptonCommandImage">
            <summary>
            Gets and sets if the large image is used from the attached KryptonCommand.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.ShortcutKeyDisplayString">
            <summary>
            Gets and sets the display text to use in preference to the shortcut key setting.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.Checked">
            <summary>
            Gets and sets if the menu item is in the checked state.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.CheckState">
            <summary>
            Gets and sets the checked state of the menu item.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.Items">
            <summary>
            Collection of sub-menu items for display.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.Enabled">
            <summary>
            Gets and sets if the menu item is enabled.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.StateDisabled">
            <summary>
            Gets access to the menu item disabled appearance values.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.StateNormal">
            <summary>
            Gets access to the menu item normal appearance values.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.StateChecked">
            <summary>
            Gets access to the menu item normal appearance values.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.StateHighlight">
            <summary>
            Gets access to the menu item highlight appearance values.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItem.KryptonCommand">
            <summary>
            Gets and sets the associated KryptonCommand.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.PerformClick">
            <summary>
            Generates a Click event for the component.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the CheckedChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItem.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Raises the CheckStateChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuItemBase">
            <summary>
            Base class that all menu types must derive from and implement.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuItemBase.PropertyChanged">
            <summary>
            Occurs when a property has changed value.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItemBase.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuItem class.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItemBase.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItemBase.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItemBase.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItemBase.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItemBase.Tag">
            <summary>
            Gets and sets user-defined data associated with the object.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItemBase.Visible">
            <summary>
            Gets and sets if the item is visible in the context menu.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItemBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs containing the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuItems">
            <summary>
            Provide a collection of menu items.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItems.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuItems class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItems.#ctor(Krypton.Toolkit.KryptonContextMenuItemBase[])">
            <summary>
            Initialize a new instance of the KryptonContextMenuItems class.
            </summary>
            <param name="children">Array of initial child items.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItems.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItems.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItems.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItems.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuItems.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItems.Items">
            <summary>
            Collection of standard menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItems.StandardStyle">
            <summary>
            Gets and sets if the collection appears as standard or alternate items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItems.ImageColumn">
            <summary>
            Gets and sets if the an image column is provided for background of images.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuItems.StateNormal">
            <summary>
            Gets access to the image column specific appearance values.
            </summary>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuLinkLabel">
            <summary>
            Provide a context menu link label.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuLinkLabel.Click">
            <summary>
            Occurs when the link label item is clicked.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuLinkLabel.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuLinkLabel class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuLinkLabel.#ctor(System.String)">
            <summary>
            Initialize a new instance of the KryptonContextMenuLinkLabel class.
            </summary>
            <param name="initialText">Initial text for display.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuLinkLabel.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuLinkLabel.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuLinkLabel.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.LabelStyle">
            <summary>
            Gets and sets the link label style.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.LinkBehavior">
            <summary>
            Gets and sets a value that determines the underline behavior of the link label.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.LinkVisited">
            <summary>
            Gets and sets a value indicating if the label has been visited.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.AutoClose">
            <summary>
            Gets and sets if clicking the link label automatically closes the context menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.Text">
            <summary>
            Gets and sets the link label text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.ExtraText">
            <summary>
            Gets and sets the link label extra text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.Image">
            <summary>
            Gets and sets the link label image.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.ImageTransparentColor">
            <summary>
            Gets and sets the link label image color to make transparent.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.StateNormal">
            <summary>
            Gets access to the link label normal instance specific appearance values.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.OverridePressed">
            <summary>
            Gets access to the pressed link label appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.OverrideFocus">
            <summary>
            Gets access to the link label appearance when it has focus.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.OverrideVisited">
            <summary>
            Gets access to normal state modifications when link label has been visited.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.OverrideNotVisited">
            <summary>
            Gets access to normal state modifications when link label has not been visited.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuLinkLabel.KryptonCommand">
            <summary>
            Gets and sets the associated KryptonCommand.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuLinkLabel.PerformClick">
            <summary>
            Generates a Click event for the component.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuLinkLabel.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuMonthCalendar">
            <summary>
            Allow user to select a date using a visual monthly calendar display.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuMonthCalendar.DateChanged">
            <summary>
            Occurs when the selected date changes.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SelectionStartChanged">
            <summary>
            Occurs when the selected start date changes.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SelectionEndChanged">
            <summary>
            Occurs when the selected end date changes.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuMonthCalendar class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.AutoClose">
            <summary>
            Gets and sets if selecting a day automatically closes the context menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.CloseOnTodayClick">
            <summary>
            Gets and sets if clicking the Today button closes the drop down menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.Enabled">
            <summary>
            Gets and sets if the radio button is enabled.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.ScrollChange">
            <summary>
            Gets or sets the number of months to scroll when next/prev buttons are used.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.TodayDate">
            <summary>
            Gets or sets today's date.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.AnnuallyBoldedDates">
            <summary>
            Gets or sets the array of DateTime objects that determines which annual days are Displayed in bold.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.MonthlyBoldedDates">
            <summary>
            Gets or sets the array of DateTime objects that determine which monthly days to bold. 
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.BoldedDates">
            <summary>
            Gets or sets the array of DateTime objects that determines which nonrecurring dates are Displayed in bold.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.MinDate">
            <summary>
            Gets or sets the minimum allowable date.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.MaxDate">
            <summary>
            Gets or sets the maximum allowable date.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.MaxSelectionCount">
            <summary>
            Gets or sets the maximum number of days that can be selected in a month calendar control.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SelectionStart">
            <summary>
            Gets or sets the start date of the selected range of dates.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SelectionEnd">
            <summary>
            Gets or sets the end date of the selected range of dates.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SelectionRange">
            <summary>
            Gets or sets the selected range of dates for a month calendar control.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.TodayFormat">
            <summary>
            Gets or sets the today date format string.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.TodayText">
            <summary>
            Gets or sets the label text for todays text. 
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.CalendarDimensions">
            <summary>
            Gets or sets the number of columns and rows of months Displayed. 
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.FirstDayOfWeek">
            <summary>
            First day of the week.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.ShowToday">
            <summary>
            Gets and sets if the control will display todays date.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.ShowTodayCircle">
            <summary>
            Gets and sets if the control will circle the today date.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.ShowWeekNumbers">
            <summary>
            Gets and sets if week numbers to the left of each row.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.HeaderStyle">
            <summary>
            Gets and sets the header style for the month calendar.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.DayStyle">
            <summary>
            Gets and sets the content style for the day entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.DayOfWeekStyle">
            <summary>
            Gets and sets the content style for the day of week labels.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideFocus">
            <summary>
            Gets access to the day appearance when it has focus.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideBolded">
            <summary>
            Gets access to the day appearance when it is bolded.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideToday">
            <summary>
            Gets access to the day appearance when it is todays.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.StateCommon">
            <summary>
            Gets access to the common month calendar appearance that other states can override.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.StateDisabled">
            <summary>
            Gets access to the month calendar disabled appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.StateNormal">
            <summary>
            Gets access to the month calendar normal appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.StateTracking">
            <summary>
            Gets access to the tracking month calendar appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.StatePressed">
            <summary>
            Gets access to the pressed month calendar appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.StateCheckedNormal">
            <summary>
            Gets access to the checked normal month calendar appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.StateCheckedTracking">
            <summary>
            Gets access to the checked tracking month calendar appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.StateCheckedPressed">
            <summary>
            Gets access to the checked pressed month calendar appearance entries.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.AddAnnuallyBoldedDate(System.DateTime)">
            <summary>
            Adds a day that is Displayed in bold on an annual basis in the month calendar.
            </summary>
            <param name="date">The date to be Displayed in bold.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.AddBoldedDate(System.DateTime)">
            <summary>
            Adds a day to be Displayed in bold in the month calendar.
            </summary>
            <param name="date">The date to be Displayed in bold.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.AddMonthlyBoldedDate(System.DateTime)">
            <summary>
            Adds a day that is Displayed in bold on a monthly basis in the month calendar.
            </summary>
            <param name="date">The date to be Displayed in bold.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.RemoveAllAnnuallyBoldedDates">
            <summary>
            Removes all the annually bold dates.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.RemoveAllBoldedDates">
            <summary>
            Removes all the nonrecurring bold dates.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.RemoveAllMonthlyBoldedDates">
            <summary>
            Removes all the monthly bold dates.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideDisabled">
            <summary>
            Gets access to the override for disabled day.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideNormal">
            <summary>
            Gets access to the override for disabled day.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideTracking">
            <summary>
            Gets access to the override for tracking day.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverridePressed">
            <summary>
            Gets access to the override for pressed day.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideCheckedNormal">
            <summary>
            Gets access to the override for checked normal day.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideCheckedTracking">
            <summary>
            Gets access to the override for checked tracking day.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OverrideCheckedPressed">
            <summary>
            Gets access to the override for checked pressed day.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.BoldedDatesList">
            <summary>
            Dates to be bolded.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.MonthlyBoldedDatesMask">
            <summary>
            Monthly days to be bolded.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.AnnuallyBoldedDatesMask">
            <summary>
            Array of annual days per month to be bolded.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SetSelectionRange(System.DateTime,System.DateTime)">
            <summary>
            Set the selection range.
            </summary>
            <param name="start">New starting date.</param>
            <param name="end">New ending date.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SetBoldedOverride(System.Boolean)">
            <summary>
            Update usage of bolded overrides.
            </summary>
            <param name="bolded">New bolded state.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SetTodayOverride(System.Boolean)">
            <summary>
            Update usage of today overrides.
            </summary>
            <param name="today">New today state.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.SetFocusOverride(System.Boolean)">
            <summary>
            Sets the use of the focus override.
            </summary>
            <param name="focus">New focus state.</param>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.HasFocus">
            <summary>
            Gets and sets if the item has the focus.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuMonthCalendar.FocusDay">
            <summary>
            Gets the focus day.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OnDateChanged(System.Windows.Forms.DateRangeEventArgs)">
            <summary>
            Raises when the DateChanged event.
            </summary>
            <param name="e">An DateRangeEventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OnSelectionStartChanged(System.EventArgs)">
            <summary>
            Raises when the SelectionStartChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuMonthCalendar.OnSelectionEndChanged(System.EventArgs)">
            <summary>
            Raises when the SelectionEndChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuRadioButton">
            <summary>
            Provide a context menu radio button.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuRadioButton.Click">
            <summary>
            Occurs when the radio button is clicked.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.KryptonContextMenuRadioButton.CheckedChanged">
            <summary>
            Occurs when the value of the Checked property has changed.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuRadioButton.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuRadioButton class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuRadioButton.#ctor(System.String)">
            <summary>
            Initialize a new instance of the KryptonContextMenuRadioButton class.
            </summary>
            <param name="initialText">Initial text for display.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuRadioButton.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuRadioButton.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuRadioButton.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.AutoClose">
            <summary>
            Gets and sets if clicking the radio button automatically closes the context menu.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.Text">
            <summary>
            Gets and sets the radio button text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.ExtraText">
            <summary>
            Gets and sets the radio button extra text.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.Image">
            <summary>
            Gets and sets the radio button image.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.ImageTransparentColor">
            <summary>
            Gets and sets the radio button image color to make transparent.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.LabelStyle">
            <summary>
            Gets and sets the radio button label style.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.Images">
            <summary>
            Gets access to the image value overrides.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.Enabled">
            <summary>
            Gets and sets if the radio button is enabled.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.Checked">
            <summary>
            Gets or sets a value indicating if the component is in the checked state.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.AutoCheck">
            <summary>
            Gets or sets a value indicating if the radio button is automatically changed state when clicked. 
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.StateCommon">
            <summary>
            Gets access to the common radio button appearance that other states can override.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.StateDisabled">
            <summary>
            Gets access to the disabled radio button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.StateNormal">
            <summary>
            Gets access to the normal radio button appearance entries.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.OverrideFocus">
            <summary>
            Gets access to the radio button appearance when it has focus.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuRadioButton.KryptonCommand">
            <summary>
            Gets and sets the associated KryptonCommand.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuRadioButton.PerformClick">
            <summary>
            Generates a Click event for the component.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuRadioButton.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuRadioButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the CheckedChanged event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="T:Krypton.Toolkit.KryptonContextMenuSeparator">
            <summary>
            Provide a context menu separator.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuSeparator.#ctor">
            <summary>
            Initialize a new instance of the KryptonContextMenuSeparator class.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuSeparator.ToString">
            <summary>
            Returns a description of the instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuSeparator.ItemChildCount">
            <summary>
            Returns the number of child menu items.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuSeparator.Item(System.Int32)">
            <summary>
            Returns the indexed child menu item.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuSeparator.ProcessShortcut(System.Windows.Forms.Keys)">
            <summary>
            Test for the provided shortcut and perform relevant action if a match is found.
            </summary>
            <param name="keyData">Key data to check against shortcut definitions.</param>
            <returns>True if shortcut was handled, otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.KryptonContextMenuSeparator.GenerateView(Krypton.Toolkit.IContextMenuProvider,System.Object,Krypton.Toolkit.ViewLayoutStack,System.Boolean,System.Boolean)">
            <summary>
            Returns a view appropriate for this item based on the object it is inside.
            </summary>
            <param name="provider">Provider of context menu information.</param>
            <param name="parent">Owning object reference.</param>
            <param name="columns">Containing columns.</param>
            <param name="standardStyle">Draw items with standard or alternate style.</param>
            <param name="imageColumn">Draw an image background for the item images.</param>
            <returns>ViewBase that is the root of the view hierarchy being added.</returns>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuSeparator.Horizontal">
            <summary>
            Gets and sets if the separator is a horizontal or vertical break.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.KryptonContextMenuSeparator.StateNormal">
            <summary>
            Gets access to the separator instance specific appearance values.
            </summary>
        </member>
        <member name="T:Krypton.Toolkit.ButtonController">
            <summary>
            Process mouse events for a standard button.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.Click">
            <summary>
            Occurs when the mouse is used to left click the target.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.RightClick">
            <summary>
            Occurs when the mouse is used to right click the target.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.MouseSelect">
            <summary>
            Occurs when the mouse is used to left select the target.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.DragStart">
            <summary>
            Occurs when start of drag operation occurs.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.DragMove">
            <summary>
            Occurs when drag moves.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.DragEnd">
            <summary>
            Occurs when drag ends.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.DragQuit">
            <summary>
            Occurs when drag quits.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.ButtonDragRectangle">
            <summary>
            Occurs when the drag rectangle for the button is required.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.ButtonController.ButtonDragOffset">
            <summary>
            Occurs when the dragging inside the button drag rectangle.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.#ctor(Krypton.Toolkit.ViewBase,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the ButtonController class.
            </summary>
            <param name="target">Target for state changes.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.Tag">
            <summary>
            Gets and sets the user data associated with the controller.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.BecomesFixed">
            <summary>
            Gets and sets if the button becomes fixed in pressed appearance when pressed.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.BecomesRightFixed">
            <summary>
            Gets and sets if the button becomes fixed in pressed appearance when pressed.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.RemoveFixed">
            <summary>
            Remove the fixed pressed mode.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.MousePoint">
            <summary>
            Gets the current tracking mouse point.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.AllowDragging">
            <summary>
            Gets and sets if dragging is allowed.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.ClearDragRect">
            <summary>
            Reset the dragging rect to prevent any dragging starting.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.ClickOnDown">
            <summary>
            Gets and sets if the press down should cause the click.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.SplitRectangle">
            <summary>
            Gets and sets the area of the button which is split.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.NonClientAsNormal">
            <summary>
            Gets and sets the drawing of a non client mouse position when pressed as normal.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.Repeat">
            <summary>
            Gets and sets the need for repeat clicks.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.MouseEnter(System.Windows.Forms.Control)">
            <summary>
            Mouse has entered the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.MouseMove(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Mouse has moved inside the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.MouseDown(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been pressed in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button pressed down.</param>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.MouseUp(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been released in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button released.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.MouseLeave(System.Windows.Forms.Control,Krypton.Toolkit.ViewBase)">
            <summary>
            Mouse has left the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="next">Reference to view that is next to have the mouse.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.DoubleClick(System.Drawing.Point)">
            <summary>
            Left mouse button double click.
            </summary>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.IgnoreVisualFormLeftButtonDown">
            <summary>
            Should the left mouse down be ignored when present on a visual form border area.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.KeyDown(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been pressed down.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.KeyPress(System.Windows.Forms.Control,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key has been pressed.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.KeyUp(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been released.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.GotFocus(System.Windows.Forms.Control)">
            <summary>
            Source control has lost the focus.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.LostFocus(System.Windows.Forms.Control)">
            <summary>
            Source control has lost the focus.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.NeedPaint">
            <summary>
            Gets and sets the need paint delegate for notifying paint requests.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.Target">
            <summary>
            Gets access to the associated target of the controller.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.PerformNeedPaint">
            <summary>
            Fires the NeedPaint event.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.PerformNeedPaint(System.Boolean)">
            <summary>
            Fires the NeedPaint event.
            </summary>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.IsOperating">
            <summary>
            Get a value indicating if the controller is operating
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.IsOnlyPressedWhenOver">
            <summary>
            Gets a value indicating if the state is pressed only when over button.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.ButtonController.Captured">
            <summary>
            Gets a value indicating if mouse input is being captured.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.ViewIsPartOfButton(Krypton.Toolkit.ViewBase)">
            <summary>
            Discovers if the provided view is part of the button.
            </summary>
            <param name="next">View to investigate.</param>
            <returns>True is part of button; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.UpdateTargetState(System.Windows.Forms.Control)">
            <summary>
            Set the correct visual state of the target.
            </summary>
            <param name="c">Owning control.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.UpdateTargetState(System.Drawing.Point)">
            <summary>
            Set the correct visual state of the target.
            </summary>
            <param name="pt">Mouse point.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnButtonDragRectangle(Krypton.Toolkit.ButtonDragRectangleEventArgs)">
            <summary>
            Raises the ButtonDragRectangle event.
            </summary>
            <param name="e">An ButtonDragRectangleEventArgs containing the event args.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnButtonDragOffset(Krypton.Toolkit.ButtonDragOffsetEventArgs)">
            <summary>
            Raises the ButtonDragOffset event.
            </summary>
            <param name="e">An ButtonDragOffsetEventArgs containing the event args.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnDragStart(System.Drawing.Point,System.Drawing.Point,System.Windows.Forms.Control)">
            <summary>
            Raises the DragStart event.
            </summary>
            <param name="mousePt">Mouse point at time of event.</param>
            <param name="offset">Offset compared to target.</param>
            <param name="c">Control that is source of drag start.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnDragMove(System.Drawing.Point)">
            <summary>
            Raises the DragMove event.
            </summary>
            <param name="mousePt">Mouse point at time of event.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnDragEnd(System.Drawing.Point)">
            <summary>
            Raises the DragEnd event.
            </summary>
            <param name="mousePt">Mouse point at time of event.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnDragQuit">
            <summary>
            Raises the DragQuit event.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">A MouseEventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnRightClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the RightClick event.
            </summary>
            <param name="e">A MouseEventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnMouseSelect(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseSelect event.
            </summary>
            <param name="e">A MouseEventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.ButtonController.OnNeedPaint(System.Boolean)">
            <summary>
            Raises the NeedPaint event.
            </summary>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="T:Krypton.Toolkit.CheckBoxController">
            <summary>
            Controller used to manage keyboard and mouse interaction withe a check box.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.CheckBoxController.Click">
            <summary>
            Occurs when the check box has been selected.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.#ctor(Krypton.Toolkit.ViewDrawCheckBox,Krypton.Toolkit.ViewBase,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the CheckBoxController class.
            </summary>
            <param name="target">Target for state changes.</param>
            <param name="top">Top element for the check box control.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.MouseEnter(System.Windows.Forms.Control)">
            <summary>
            Mouse has entered the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.MouseMove(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Mouse has moved inside the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.MouseDown(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been pressed in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button pressed down.</param>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.MouseUp(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been released in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button released.</param>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.MouseLeave(System.Windows.Forms.Control,Krypton.Toolkit.ViewBase)">
            <summary>
            Mouse has left the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="next">Reference to view that is next to have the mouse.</param>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.DoubleClick(System.Drawing.Point)">
            <summary>
            Left mouse button double click.
            </summary>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="P:Krypton.Toolkit.CheckBoxController.IgnoreVisualFormLeftButtonDown">
            <summary>
            Should the left mouse down be ignored when present on a visual form border area.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.KeyDown(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been pressed down.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.KeyPress(System.Windows.Forms.Control,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key has been pressed.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.KeyUp(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been released.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="P:Krypton.Toolkit.CheckBoxController.Enabled">
            <summary>
            Gets and sets the enabled state of the controller.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.CheckBoxController.NeedPaint">
            <summary>
            Gets and sets the need paint delegate for notifying paint requests.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.CheckBoxController.Target">
            <summary>
            Gets access to the associated target of the controller.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.PerformNeedPaint">
            <summary>
            Fires the NeedPaint event.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.PerformNeedPaint(System.Boolean)">
            <summary>
            Fires the NeedPaint event.
            </summary>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An EventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.CheckBoxController.OnNeedPaint(System.Boolean)">
            <summary>
            Raises the NeedPaint event.
            </summary>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="T:Krypton.Toolkit.ContextMenuController">
            <summary>
            Controller for a VisualContextMenu popup.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ContextMenuController.#ctor(Krypton.Toolkit.ViewContextMenuManager)">
            <summary>
            Initialize a new instance of the ContextMenuController class.
            </summary>
            <param name="viewManager">Owning view manager instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ContextMenuController.KeyDown(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been pressed down.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.ContextMenuController.KeyPress(System.Windows.Forms.Control,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key has been pressed.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.ContextMenuController.KeyUp(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been released.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="T:Krypton.Toolkit.IMouseController">
            <summary>
            Interface for processing mouse notifications.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.IMouseController.MouseEnter(System.Windows.Forms.Control)">
            <summary>
            Mouse has entered the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.IMouseController.MouseMove(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Mouse has moved inside the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="M:Krypton.Toolkit.IMouseController.MouseDown(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been pressed in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button pressed down.</param>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.IMouseController.MouseUp(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been released in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button released.</param>
        </member>
        <member name="M:Krypton.Toolkit.IMouseController.MouseLeave(System.Windows.Forms.Control,Krypton.Toolkit.ViewBase)">
            <summary>
            Mouse has left the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="next">Reference to view that is next to have the mouse.</param>
        </member>
        <member name="M:Krypton.Toolkit.IMouseController.DoubleClick(System.Drawing.Point)">
            <summary>
            Left mouse button double click.
            </summary>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="P:Krypton.Toolkit.IMouseController.IgnoreVisualFormLeftButtonDown">
            <summary>
            Should the left mouse down be ignored when present on a visual form border area.
            </summary>
        </member>
        <member name="T:Krypton.Toolkit.IKeyController">
            <summary>
            Interface for processing keyboard notifications.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.IKeyController.KeyDown(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been pressed down.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.IKeyController.KeyPress(System.Windows.Forms.Control,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key has been pressed.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.IKeyController.KeyUp(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been released.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="T:Krypton.Toolkit.ISourceController">
            <summary>
            Interface for processing source notifications.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.ISourceController.GotFocus(System.Windows.Forms.Control)">
            <summary>
            Source control has got the focus.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.ISourceController.LostFocus(System.Windows.Forms.Control)">
            <summary>
            Source control has lost the focus.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="T:Krypton.Toolkit.LinkLabelController">
            <summary>
            Process mouse events for a link label control.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.LinkLabelController.Click">
            <summary>
            Occurs when the mouse is used to left click the target.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.#ctor(Krypton.Toolkit.ViewDrawContent,Krypton.Toolkit.IPaletteContent,Krypton.Toolkit.IPaletteContent,Krypton.Toolkit.IPaletteContent,Krypton.Toolkit.IPaletteContent,Krypton.Toolkit.PaletteContentInheritOverride,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the LinkLabelController class.
            </summary>
            <param name="target">Target for state changes.</param>
            <param name="paletteDisabled">Palette to use in the disabled state.</param>
            <param name="paletteNormal">Palette to use in the normal state.</param>
            <param name="paletteTracking">Palette to use in the tracking state.</param>
            <param name="palettePressed">Palette to use in the pressed state.</param>
            <param name="pressed">Override to update with the pressed state.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.MouseEnter(System.Windows.Forms.Control)">
            <summary>
            Mouse has entered the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.MouseMove(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Mouse has moved inside the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.MouseDown(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been pressed in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button pressed down.</param>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.MouseUp(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been released in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button released.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.MouseLeave(System.Windows.Forms.Control,Krypton.Toolkit.ViewBase)">
            <summary>
            Mouse has left the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="next">Reference to view that is next to have the mouse.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.DoubleClick(System.Drawing.Point)">
            <summary>
            Left mouse button double click.
            </summary>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="P:Krypton.Toolkit.LinkLabelController.IgnoreVisualFormLeftButtonDown">
            <summary>
            Should the left mouse down be ignored when present on a visual form border area.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.KeyDown(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been pressed down.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.KeyPress(System.Windows.Forms.Control,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key has been pressed.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.KeyUp(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been released.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.GotFocus(System.Windows.Forms.Control)">
            <summary>
            Source control has lost the focus.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.LostFocus(System.Windows.Forms.Control)">
            <summary>
            Source control has lost the focus.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="P:Krypton.Toolkit.LinkLabelController.NeedPaint">
            <summary>
            Gets and sets the need paint delegate for notifying paint requests.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.LinkLabelController.Target">
            <summary>
            Gets access to the associated target of the controller.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.Update(System.Windows.Forms.Control)">
            <summary>
            Set the correct visual state of the target.
            </summary>
            <param name="c">Control that controller is operating within.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.PerformNeedPaint">
            <summary>
            Fires the NeedPaint event.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.PerformNeedPaint(System.Boolean)">
            <summary>
            Fires the NeedPaint event.
            </summary>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="P:Krypton.Toolkit.LinkLabelController.IsOperating">
            <summary>
            Get a value indicating if the controller is operating
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.LinkLabelController.IsOnlyPressedWhenOver">
            <summary>
            Gets a value indicating if the state is pressed only when over button.
            </summary>
        </member>
        <member name="P:Krypton.Toolkit.LinkLabelController.Captured">
            <summary>
            Gets a value indicating if mouse input is being captured.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.UpdateTargetState(System.Windows.Forms.Control)">
            <summary>
            Set the correct visual state of the target.
            </summary>
            <param name="c">Owning control.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.UpdateTargetState(System.Drawing.Point)">
            <summary>
            Set the target with correct state and palette.
            </summary>
            <param name="pt">Mouse point.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.UpdateTargetPalette">
            <summary>
            Update the palette to match the target state.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.OnClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">A MouseEventArgs containing the event data.</param>
        </member>
        <member name="M:Krypton.Toolkit.LinkLabelController.OnNeedPaint(System.Boolean)">
            <summary>
            Raises the NeedPaint event.
            </summary>
            <param name="needLayout">Does the palette change require a layout.</param>
        </member>
        <member name="E:Krypton.Toolkit.MenuCheckBoxController.Click">
            <summary>
            Occurs when the check box has been clicked.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.#ctor(Krypton.Toolkit.ViewContextMenuManager,Krypton.Toolkit.ViewBase,Krypton.Toolkit.ViewDrawMenuCheckBox,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the MenuCheckBoxController class.
            </summary>
            <param name="viewManager">Owning view manager instance.</param>
            <param name="target">Target for state changes.</param>
            <param name="checkBox">Drawing element that owns check box display.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="P:Krypton.Toolkit.MenuCheckBoxController.HasSubMenu">
            <summary>
            Returns if the item shows a sub menu when selected.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.ShowTarget">
            <summary>
            This target should display as the active target.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.ClearTarget">
            <summary>
            This target should clear any active display.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.ShowSubMenu">
            <summary>
            This target should show any appropriate sub menu.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.ClearSubMenu">
            <summary>
            This target should remove any showing sub menu.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.MatchMnemonic(System.Char)">
            <summary>
            Determine if the keys value matches the mnemonic setting for this target.
            </summary>
            <param name="charCode">Key code to test against.</param>
            <returns>True if a match is found; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.MnemonicActivate">
            <summary>
            Activate the item because of a mnemonic key press.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.GetActiveView">
            <summary>
            Gets the view element that should be used when this target is active.
            </summary>
            <returns>View element to become active.</returns>
        </member>
        <member name="P:Krypton.Toolkit.MenuCheckBoxController.ClientRectangle">
            <summary>
            Get the client rectangle for the display of this target.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.DoesStackedClientMouseDownBecomeCurrent(System.Drawing.Point)">
            <summary>
            Should a mouse down at the provided point cause the currently stacked context menu to become current.
            </summary>
            <param name="pt">Client coordinates point.</param>
            <returns>True to become current; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.MouseEnter(System.Windows.Forms.Control)">
            <summary>
            Mouse has entered the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.MouseMove(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Mouse has moved inside the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.MouseDown(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been pressed in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button pressed down.</param>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.MouseUp(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Mouse button has been released in the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="pt">Mouse position relative to control.</param>
            <param name="button">Mouse button released.</param>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.MouseLeave(System.Windows.Forms.Control,Krypton.Toolkit.ViewBase)">
            <summary>
            Mouse has left the view.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="next">Reference to view that is next to have the mouse.</param>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.DoubleClick(System.Drawing.Point)">
            <summary>
            Left mouse button double click.
            </summary>
            <param name="pt">Mouse position relative to control.</param>
        </member>
        <member name="P:Krypton.Toolkit.MenuCheckBoxController.IgnoreVisualFormLeftButtonDown">
            <summary>
            Should the left mouse down be ignored when present on a visual form border area.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.KeyDown(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been pressed down.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.KeyPress(System.Windows.Forms.Control,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key has been pressed.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.KeyUp(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key has been released.
            </summary>
            <param name="c">Reference to the source control instance.</param>
            <param name="e">A KeyEventArgs that contains the event data.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>True if capturing input; otherwise false.</returns>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.GotFocus(System.Windows.Forms.Control)">
            <summary>
            Source control has lost the focus.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.LostFocus(System.Windows.Forms.Control)">
            <summary>
            Source control has lost the focus.
            </summary>
            <param name="c">Reference to the source control instance.</param>
        </member>
        <member name="P:Krypton.Toolkit.MenuCheckBoxController.NeedPaint">
            <summary>
            Gets and sets the need paint delegate for notifying paint requests.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckBoxController.PerformNeedPaint">
            <summary>
            Fires the NeedPaint event.
            </summary>
        </member>
        <member name="E:Krypton.Toolkit.MenuCheckButtonController.Click">
            <summary>
            Occurs when the check button has been clicked.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckButtonController.#ctor(Krypton.Toolkit.ViewContextMenuManager,Krypton.Toolkit.ViewBase,Krypton.Toolkit.ViewDrawMenuCheckButton,Krypton.Toolkit.NeedPaintHandler)">
            <summary>
            Initialize a new instance of the MenuCheckButtonController class.
            </summary>
            <param name="viewManager">Owning view manager instance.</param>
            <param name="target">Target for state changes.</param>
            <param name="checkButton">Drawing element that owns check button display.</param>
            <param name="needPaint">Delegate for notifying paint requests.</param>
        </member>
        <member name="P:Krypton.Toolkit.MenuCheckButtonController.HasSubMenu">
            <summary>
            Returns if the item shows a sub menu when selected.
            </summary>
        </member>
        <member name="M:Krypton.Toolkit.MenuCheckButtonController.ShowTarget">
            <summary>
         